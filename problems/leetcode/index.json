{
    "1392": {
        "comment": null,
        "problem": {
            "description": "<div><p>A string is called a <strong>happy prefix</strong> if is a <strong>non-empty</strong> prefix which is also a suffix (excluding itself).</p>\n\n<p>Given a string <code>s</code>, return <em>the <strong>longest happy prefix</strong> of</em> <code>s</code>. Return an empty string <code>\"\"</code> if no such prefix exists.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre><strong>Input:</strong> s = \"level\"\n<strong>Output:</strong> \"l\"\n<strong>Explanation:</strong> s contains 4 prefix excluding itself (\"l\", \"le\", \"lev\", \"leve\"), and suffix (\"l\", \"el\", \"vel\", \"evel\"). The largest prefix which is also suffix is given by \"l\".\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre><strong>Input:</strong> s = \"ababab\"\n<strong>Output:</strong> \"abab\"\n<strong>Explanation:</strong> \"abab\" is the largest prefix which is also suffix. They can overlap in the original string.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> contains only lowercase English letters.</li>\n</ul>\n</div>",
            "difficulty": "Hard",
            "id": "1392",
            "title": "1392. Longest Happy Prefix"
        },
        "solutions": {
            "js": {
                "comment": "For the reason unbeknownst to me, this naive solution has ~500ms execution time.",
                "solution": "/**\n * @param {string} s\n * @return {string}\n */\nvar longestPrefix = function(s) {\n    let longest = '';\n    let len = 1;\n    \n    while(len < s.length){\n        if (s.substring(0,len) == s.substring(s.length-len))\n            longest = s.substring(0,len);\n        \n        len++;\n    }\n    return longest;\n};"
            }
        }
    },
    "2129": {
        "comment": null,
        "problem": {
            "description": "<div><p>You are given a string <code>title</code> consisting of one or more words separated by a single space, where each word consists of English letters. <strong>Capitalize</strong> the string by changing the capitalization of each word such that:</p>\n\n<ul>\n\t<li>If the length of the word is <code>1</code> or <code>2</code> letters, change all letters to lowercase.</li>\n\t<li>Otherwise, change the first letter to uppercase and the remaining letters to lowercase.</li>\n</ul>\n\n<p>Return <em>the <strong>capitalized</strong> </em><code>title</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre><strong>Input:</strong> title = \"capiTalIze tHe titLe\"\n<strong>Output:</strong> \"Capitalize The Title\"\n<strong>Explanation:</strong>\nSince all the words have a length of at least 3, the first letter of each word is uppercase, and the remaining letters are lowercase.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre><strong>Input:</strong> title = \"First leTTeR of EACH Word\"\n<strong>Output:</strong> \"First Letter of Each Word\"\n<strong>Explanation:</strong>\nThe word \"of\" has length 2, so it is all lowercase.\nThe remaining words have a length of at least 3, so the first letter of each remaining word is uppercase, and the remaining letters are lowercase.\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre><strong>Input:</strong> title = \"i lOve leetcode\"\n<strong>Output:</strong> \"i Love Leetcode\"\n<strong>Explanation:</strong>\nThe word \"i\" has length 1, so it is lowercase.\nThe remaining words have a length of at least 3, so the first letter of each remaining word is uppercase, and the remaining letters are lowercase.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= title.length &lt;= 100</code></li>\n\t<li><code>title</code> consists of words separated by a single space without any leading or trailing spaces.</li>\n\t<li>Each word consists of uppercase and lowercase English letters and is <strong>non-empty</strong>.</li>\n</ul>\n</div>",
            "difficulty": "Easy",
            "id": "2129",
            "title": "2129. Capitalize the Title"
        },
        "solutions": {
            "js": {
                "comment": null,
                "solution": "/**\n * @param {string} title\n * @return {string}\n */\nvar capitalizeTitle = function(title) {\n    let tmp = title.split(' ');\n    for (let i=0;i<tmp.length;i++){\n        if (tmp[i].length>2){\n            tmp[i] = tmp[i][0].toUpperCase() + tmp[i].substring(1).toLowerCase();\n        } else {\n            tmp[i] = tmp[i].toLowerCase();    \n        }\n    }\n    return tmp.join(' ');\n};"
            }
        }
    },
    "380": {
        "comment": null,
        "problem": {
            "description": "<div><p>Implement the <code>RandomizedSet</code> class:</p>\n\n<ul>\n\t<li><code>RandomizedSet()</code> Initializes the <code>RandomizedSet</code> object.</li>\n\t<li><code>bool insert(int val)</code> Inserts an item <code>val</code> into the set if not present. Returns <code>true</code> if the item was not present, <code>false</code> otherwise.</li>\n\t<li><code>bool remove(int val)</code> Removes an item <code>val</code> from the set if present. Returns <code>true</code> if the item was present, <code>false</code> otherwise.</li>\n\t<li><code>int getRandom()</code> Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). Each element must have the <b>same probability</b> of being returned.</li>\n</ul>\n\n<p>You must implement the functions of the class such that each function works in&nbsp;<strong>average</strong>&nbsp;<code>O(1)</code>&nbsp;time complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre><strong>Input</strong>\n[\"RandomizedSet\", \"insert\", \"remove\", \"insert\", \"getRandom\", \"remove\", \"insert\", \"getRandom\"]\n[[], [1], [2], [2], [], [1], [2], []]\n<strong>Output</strong>\n[null, true, false, true, 2, true, false, 2]\n\n<strong>Explanation</strong>\nRandomizedSet randomizedSet = new RandomizedSet();\nrandomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.\nrandomizedSet.remove(2); // Returns false as 2 does not exist in the set.\nrandomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].\nrandomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.\nrandomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].\nrandomizedSet.insert(2); // 2 was already in the set, so return false.\nrandomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= val &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li>At most <code>2 *&nbsp;</code><code>10<sup>5</sup></code> calls will be made to <code>insert</code>, <code>remove</code>, and <code>getRandom</code>.</li>\n\t<li>There will be <strong>at least one</strong> element in the data structure when <code>getRandom</code> is called.</li>\n</ul>\n</div>",
            "difficulty": "Medium",
            "id": "380",
            "title": "380. Insert Delete GetRandom O(1)"
        },
        "solutions": {
            "js": {
                "comment": "Naive solution, using native 'hash tables'",
                "solution": "var RandomizedSet = function() {\n    this.set=new Object();\n};\n\n/** \n * @param {number} val\n * @return {boolean}\n */\nRandomizedSet.prototype.insert = function(val) {\n    if (this.set[val]) {\n        return false;\n    }\n    \n    this.set[val]=true;\n    return true;\n};\n\n/** \n * @param {number} val\n * @return {boolean}\n */\nRandomizedSet.prototype.remove = function(val) {\n    if (!this.set[val]) {\n        return false;\n    }\n    \n    delete this.set[val];\n    return true;\n    \n};\n\n/**\n * @return {number}\n */\nRandomizedSet.prototype.getRandom = function() {\n    let ks = Object.keys(this.set);\n    let rnd = Math.floor(Math.random() * ks.length);\n    return ks[rnd];\n};\n\n/** \n * Your RandomizedSet object will be instantiated and called as such:\n * var obj = new RandomizedSet()\n * var param_1 = obj.insert(val)\n * var param_2 = obj.remove(val)\n * var param_3 = obj.getRandom()\n */"
            }
        }
    },
    "381": {
        "comment": null,
        "problem": {
            "description": "<div><p><code>RandomizedCollection</code> is a data structure that contains a collection of numbers, possibly duplicates (i.e., a multiset). It should support inserting and removing specific elements and also removing a random element.</p>\n\n<p>Implement the <code>RandomizedCollection</code> class:</p>\n\n<ul>\n\t<li><code>RandomizedCollection()</code> Initializes the empty <code>RandomizedCollection</code> object.</li>\n\t<li><code>bool insert(int val)</code> Inserts an item <code>val</code> into the multiset, even if the item is already present. Returns <code>true</code> if the item is not present, <code>false</code> otherwise.</li>\n\t<li><code>bool remove(int val)</code> Removes an item <code>val</code> from the multiset if present. Returns <code>true</code> if the item is present, <code>false</code> otherwise. Note that if <code>val</code> has multiple occurrences in the multiset, we only remove one of them.</li>\n\t<li><code>int getRandom()</code> Returns a random element from the current multiset of elements. The probability of each element being returned is <strong>linearly related</strong> to the number of same values the multiset contains.</li>\n</ul>\n\n<p>You must implement the functions of the class such that each function works on <strong>average</strong> <code>O(1)</code> time complexity.</p>\n\n<p><strong>Note:</strong> The test cases are generated such that <code>getRandom</code> will only be called if there is <strong>at least one</strong> item in the <code>RandomizedCollection</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre><strong>Input</strong>\n[\"RandomizedCollection\", \"insert\", \"insert\", \"insert\", \"getRandom\", \"remove\", \"getRandom\"]\n[[], [1], [1], [2], [], [1], []]\n<strong>Output</strong>\n[null, true, false, true, 2, true, 1]\n\n<strong>Explanation</strong>\nRandomizedCollection randomizedCollection = new RandomizedCollection();\nrandomizedCollection.insert(1);   // return true since the collection does not contain 1.\n                                  // Inserts 1 into the collection.\nrandomizedCollection.insert(1);   // return false since the collection contains 1.\n                                  // Inserts another 1 into the collection. Collection now contains [1,1].\nrandomizedCollection.insert(2);   // return true since the collection does not contain 2.\n                                  // Inserts 2 into the collection. Collection now contains [1,1,2].\nrandomizedCollection.getRandom(); // getRandom should:\n                                  // - return 1 with probability 2/3, or\n                                  // - return 2 with probability 1/3.\nrandomizedCollection.remove(1);   // return true since the collection contains 1.\n                                  // Removes 1 from the collection. Collection now contains [1,2].\nrandomizedCollection.getRandom(); // getRandom should return 1 or 2, both equally likely.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= val &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li>At most <code>2 * 10<sup>5</sup></code> calls <strong>in total</strong> will be made to <code>insert</code>, <code>remove</code>, and <code>getRandom</code>.</li>\n\t<li>There will be <strong>at least one</strong> element in the data structure when <code>getRandom</code> is called.</li>\n</ul>\n</div>",
            "difficulty": "Hard",
            "id": "381",
            "title": "381. Insert Delete GetRandom O(1) - Duplicates allowed"
        },
        "solutions": {
            "py3": {
                "comment": "Keep track of added elements and their positions; removing elements by swapping + popping",
                "solution": "class RandomizedCollection:\n\n    def __init__(self):\n        self.set = {}\n        self.keys = []\n\n    def insert(self, val: int) -> bool:\n        res = False\n        \n        if not val in self.set:\n            self.set[val] = []\n            res = True\n        \n        self.keys.append(val)\n        self.set[val].append(len(self.keys)-1)\n        \n        return res;\n\n    def remove(self, val: int) -> bool:\n        if not val in self.set:\n            return False\n        \n        index = self.set[val].pop()\n        \n        if len(self.set[val]) == 0:\n            del self.set[val]\n            \n        last_elem = self.keys.pop()\n        if index != len(self.keys): # do nothing if to-delete was just popped\n            self.keys[index]=last_elem\n            set_index = self.set[last_elem].index(len(self.keys))\n            self.set[last_elem][set_index] = index\n        \n        return True\n        \n\n    def getRandom(self) -> int:\n        return self.keys[randint(0, len(self.keys)-1)]\n        \n\n\n# Your RandomizedCollection object will be instantiated and called as such:\n# obj = RandomizedCollection()\n# param_1 = obj.insert(val)\n# param_2 = obj.remove(val)\n# param_3 = obj.getRandom()"
            }
        }
    },
    "449": {
        "comment": "Optimal solution would be packing each node info int two bytes: 14 bits for int + 2 bits for 'has left/right child'",
        "problem": {
            "description": "<div><p>Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p>\n\n<p>Design an algorithm to serialize and deserialize a <b>binary search tree</b>. There is no restriction on how your serialization/deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.</p>\n\n<p><b>The encoded string should be as compact as possible.</b></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> root = [2,1,3]\n<strong>Output:</strong> [2,1,3]\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> root = []\n<strong>Output:</strong> []\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>The number of nodes in the tree is in the range <code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>0 &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n\t<li>The input tree is <strong>guaranteed</strong> to be a binary search tree.</li>\n</ul>\n</div>",
            "difficulty": "Medium",
            "id": "449",
            "title": "449. Serialize and Deserialize BST"
        },
        "solutions": {
            "js": {
                "comment": "Dirty suboptimal non-recursive solution",
                "solution": "/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n\nconst separator = ',';\nconst null_node = '-';\n\n/**\n * Encodes a tree to a single string.\n *\n * @param {TreeNode} root\n * @return {string}\n */\nvar serialize = function(root) {\n    let output = '';\n    let cur_level_nodes = [];\n    cur_level_nodes.push(root);\n    let next_level_nodes = [];\n    while(cur_level_nodes.length) { \n        for (let i=0;i<cur_level_nodes.length;i++) {\n            if (cur_level_nodes[i] === null){\n                output += null_node;\n            } else {\n                output += cur_level_nodes[i].val.toString();\n                if (cur_level_nodes[i].left === null){\n                    next_level_nodes.push(null)\n                } else {\n                    next_level_nodes.push(cur_level_nodes[i].left)\n                }\n                if (cur_level_nodes[i].right === null){\n                    next_level_nodes.push(null)\n                } else {\n                    next_level_nodes.push(cur_level_nodes[i].right)\n                }\n            }\n            output += separator;\n        }\n        cur_level_nodes = next_level_nodes;\n        next_level_nodes = [];\n    }\n    \n    return output;\n};\n\n/**\n * Decodes your encoded data to tree.\n *\n * @param {string} data\n * @return {TreeNode}\n */\nvar deserialize = function(data) {\n    let current_level_nodes = 1;\n    let next_level_nodes_to_expect = 0;\n    let nodes_waiting_list = [];\n    \n    let root = null;\n    let current_waiting_node = null;\n    \n    let current_substring = '';\n    \n    for (let i=0; i<data.length;i++){\n        if (data[i]!==separator){ //there will always be a separator at the end of file\n            current_substring += data[i];\n        } else {\n            let curnodeval = current_substring;\n            current_substring = '';\n            let picked_node = null;\n            \n            if (curnodeval !== null_node) {\n                picked_node = new TreeNode(curnodeval);\n            }\n            \n            if (root===null) {\n                root = picked_node;\n                nodes_waiting_list.push(root);\n            } else {\n                if (current_waiting_node == null){\n                    current_waiting_node = nodes_waiting_list.shift();\n                    if (picked_node) {\n                        current_waiting_node.left = picked_node;\n                        nodes_waiting_list.push(picked_node);\n                    }\n                } else {\n                    if (picked_node) {\n                        current_waiting_node.right = picked_node;\n                        nodes_waiting_list.push(picked_node);\n                    }\n                    current_waiting_node = null;\n                }\n            }\n        }\n    }\n    return root;\n};\n\n/**\n * Your functions will be called as such:\n * deserialize(serialize(root));\n */"
            }
        }
    },
    "520": {
        "comment": null,
        "problem": {
            "description": "<div><p>We define the usage of capitals in a word to be right when one of the following cases holds:</p>\n\n<ul>\n\t<li>All letters in this word are capitals, like <code>\"USA\"</code>.</li>\n\t<li>All letters in this word are not capitals, like <code>\"leetcode\"</code>.</li>\n\t<li>Only the first letter in this word is capital, like <code>\"Google\"</code>.</li>\n</ul>\n\n<p>Given a string <code>word</code>, return <code>true</code> if the usage of capitals in it is right.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<pre><strong>Input:</strong> word = \"USA\"\n<strong>Output:</strong> true\n</pre><p><strong>Example 2:</strong></p>\n<pre><strong>Input:</strong> word = \"FlaG\"\n<strong>Output:</strong> false\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 100</code></li>\n\t<li><code>word</code> consists of lowercase and uppercase English letters.</li>\n</ul>\n</div>",
            "difficulty": "Easy",
            "id": "520",
            "title": "520. Detect Capital"
        },
        "solutions": {
            "js": {
                "comment": "Naive solution",
                "solution": "/**\n * @param {string} word\n * @return {boolean}\n */\nvar detectCapitalUse = function(word) {\n    if (word == word.toLowerCase() || word == word.toUpperCase())\n        return true;\n    \n    if (word[0] != word[0].toUpperCase())\n        return false;\n    \n    if (word.substr(1) == word.substr(1).toLowerCase())\n        return true;\n    \n    return false;\n};"
            },
            "py3": {
                "comment": "regex solution",
                "solution": "import re\nclass Solution:\n    def detectCapitalUse(self, word: str) -> bool:\n        p = re.compile('(^[A-Z]*$|^[a-z]*$|^[A-Z][a-z]*$)')\n        return p.match(word)"
            }
        }
    },
    "7": {
        "comment": null,
        "problem": {
            "description": "<div><p>Given a signed 32-bit integer <code>x</code>, return <code>x</code><em> with its digits reversed</em>. If reversing <code>x</code> causes the value to go outside the signed 32-bit integer range <code>[-2<sup>31</sup>, 2<sup>31</sup> - 1]</code>, then return <code>0</code>.</p>\n\n<p><strong>Assume the environment does not allow you to store 64-bit integers (signed or unsigned).</strong></p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre><strong>Input:</strong> x = 123\n<strong>Output:</strong> 321\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre><strong>Input:</strong> x = -123\n<strong>Output:</strong> -321\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre><strong>Input:</strong> x = 120\n<strong>Output:</strong> 21\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup> &lt;= x &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n</div>",
            "difficulty": "Medium",
            "id": "7",
            "title": "7. Reverse Integer"
        },
        "solutions": {}
    },
    "80": {
        "comment": null,
        "problem": {
            "description": "<div><p>Given an integer array <code>nums</code> sorted in <strong>non-decreasing order</strong>, remove some duplicates <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"><strong>in-place</strong></a> such that each unique element appears <strong>at most twice</strong>. The <strong>relative order</strong> of the elements should be kept the <strong>same</strong>.</p>\n\n<p>Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the <strong>first part</strong> of the array <code>nums</code>. More formally, if there are <code>k</code> elements after removing the duplicates, then the first <code>k</code> elements of <code>nums</code>&nbsp;should hold the final result. It does not matter what you leave beyond the first&nbsp;<code>k</code>&nbsp;elements.</p>\n\n<p>Return <code>k</code><em> after placing the final result in the first </em><code>k</code><em> slots of </em><code>nums</code>.</p>\n\n<p>Do <strong>not</strong> allocate extra space for another array. You must do this by <strong>modifying the input array <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\">in-place</a></strong> with O(1) extra memory.</p>\n\n<p><strong>Custom Judge:</strong></p>\n\n<p>The judge will test your solution with the following code:</p>\n\n<pre>int[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\n\nint k = removeDuplicates(nums); // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i &lt; k; i++) {\n    assert nums[i] == expectedNums[i];\n}\n</pre>\n\n<p>If all assertions pass, then your solution will be <strong>accepted</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre><strong>Input:</strong> nums = [1,1,1,2,2,3]\n<strong>Output:</strong> 5, nums = [1,1,2,2,3,_]\n<strong>Explanation:</strong> Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre><strong>Input:</strong> nums = [0,0,1,1,1,1,2,3,3]\n<strong>Output:</strong> 7, nums = [0,0,1,1,2,3,3,_,_]\n<strong>Explanation:</strong> Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>nums</code> is sorted in <strong>non-decreasing</strong> order.</li>\n</ul>\n</div>",
            "difficulty": "Medium",
            "id": "80",
            "title": "80. Remove Duplicates from Sorted Array II"
        },
        "solutions": {
            "js": {
                "comment": null,
                "solution": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar removeDuplicates = function(nums) {\n    let k = len = nums.length;\n    let repetitions = 0;\n    let insert_at = 0;\n    let curr_symbol = nums[0];\n        \n    for (let i=1;i<len;i++){\n        insert_at++;\n        \n        if (nums[i]==curr_symbol){\n            repetitions++;\n        } else {\n            repetitions=0;\n            curr_symbol = nums[i];\n        }\n        \n        if (repetitions>1){\n            k--;\n            insert_at--;\n        } else {\n            nums[insert_at] = nums[i];    \n        }\n    }\n    \n    return k;\n};"
            }
        }
    }
}